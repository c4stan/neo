#version 450

#include "xs.glsl"

#include "common.glsl"

layout ( binding = 0, set = xs_shader_binding_set_dispatch_m ) uniform texture2D tex_color;
layout ( binding = 1, set = xs_shader_binding_set_dispatch_m ) uniform texture2D tex_depth;
layout ( binding = 2, set = xs_shader_binding_set_dispatch_m ) uniform texture2D tex_history;
layout ( binding = 3, set = xs_shader_binding_set_dispatch_m ) uniform texture2D tex_id;
layout ( binding = 4, set = xs_shader_binding_set_dispatch_m ) uniform texture2D tex_velocity;

layout ( binding = 5, set = xs_shader_binding_set_dispatch_m, r11f_g11f_b10f ) uniform writeonly image2D img_color;

layout ( binding = 6, set = xs_shader_binding_set_dispatch_m ) uniform sampler sampler_point;
layout ( binding = 7, set = xs_shader_binding_set_dispatch_m ) uniform sampler sampler_linear;

layout ( local_size_x = 8, local_size_y = 8, local_size_z = 1 ) in;

// https://alextardif.com/TAA.html
// https://www.elopezr.com/temporal-aa-and-the-quest-for-the-holy-trail/
// https://ziyadbarakat.wordpress.com/2020/07/28/temporal-anti-aliasing-step-by-step/
// https://s3.amazonaws.com/arena-attachments/655504/c5c71c5507f0f8bf344252958254fb7d.pdf?1468341463
// https://www.gamedev.net/forums/topic/714378-removing-jitter-when-rendering-velocity-texture-for-taa/
// https://gist.github.com/TheRealMJP/c83b8c0f46b63f3a88a5986f4fa982b1
// https://bartwronski.com/2014/03/15/temporal-supersampling-and-antialiasing/

void main ( void ) {
    vec2 screen_uv = vec2 ( ( gl_GlobalInvocationID.xy + vec2 ( 0.5 ) ) / frame_uniforms.resolution_f32 );
    vec2 texel_size = 1.0 / frame_uniforms.resolution_f32;

    // Sample
    vec3 color = texture ( sampler2D ( tex_color, sampler_point ), screen_uv ).xyz;
    float depth = texture ( sampler2D ( tex_depth, sampler_point ), screen_uv ).x;
    vec2 velocity = texture ( sampler2D ( tex_velocity, sampler_point ), screen_uv ).xy;

    // Reproject
#if 0
    vec3 view = view_from_depth ( screen_uv, depth );
    vec3 world = ( frame_uniforms.world_from_view * vec4 ( view, 1 ) ).xyz;
    vec3 prev_screen = prev_screen_from_world ( world );
    vec2 screen_offset = prev_screen.xy - screen_uv;
    vec2 reprojected_uv = screen_uv + screen_offset;
#else
    vec2 jitter = vec2 ( frame_uniforms.jittered_proj_from_view[2][0], frame_uniforms.jittered_proj_from_view[2][1] );
    vec2 reprojected_uv = screen_uv - velocity - jitter / 2;
#endif

#if 1
    // Sample history
    vec3 history = texture ( sampler2D ( tex_history, sampler_linear ), reprojected_uv ).xyz;
    if ( frame_uniforms.is_reload > 0 ) {
        history = color;
    }
#else
    // TODO test on moving scene
    vec3 history = sample_catmull_rom ( tex_history, sampler_linear, reprojected_uv, frame_uniforms.resolution_f32 ).xyz;
#endif

    // Sample neighborhood
    vec3 n0 = texture ( sampler2D ( tex_color, sampler_point ), screen_uv + vec2 (  1,  0 ) * texel_size ).xyz;
    vec3 n1 = texture ( sampler2D ( tex_color, sampler_point ), screen_uv + vec2 (  0,  1 ) * texel_size ).xyz;
    vec3 n2 = texture ( sampler2D ( tex_color, sampler_point ), screen_uv + vec2 ( -1,  0 ) * texel_size ).xyz;
    vec3 n3 = texture ( sampler2D ( tex_color, sampler_point ), screen_uv + vec2 (  0, -1 ) * texel_size ).xyz;

#if 1
    // Neighborhood clamping [Lottes11], [Malan12]
    // reduces disocclusion ghosting
    vec3 color_min = min ( color, min ( n0, min ( n1, min ( n2, n3 ) ) ) );
    vec3 color_max = max ( color, max ( n0, max ( n1, max ( n2, n3 ) ) ) );

    vec3 clamped_history = clamp ( history, color_min, color_max );
#else
    // Variance clipping [Salvi16]
    const float VARIANCE_CLIPPING_GAMMA = 1.f;

    vec3 moment1 = color + n0 + n1 + n2 + n3;
    vec3 moment2 = color * color + n0 * n0 + n1 * n1 + n2 * n2 + n3 * n3;

    vec3 mu = moment1 / 5.0;
    vec3 sigma = sqrt ( moment2 / 5.0 - mu * mu );

    vec3 color_min = mu - VARIANCE_CLIPPING_GAMMA * sigma;
    vec3 color_max = mu + VARIANCE_CLIPPING_GAMMA * sigma;

    history = clamp ( history, color_min, color_max );
#endif

    // --- Anti-flicker weight modulation ---
#if 1
#if 0
    float blend_factor = 0.1f;

    float weight = 1.0;

    for (int i = 0; i < 3; ++i) {
        float range = color_max[i] - color_min[i] + 0.0001f;
        float norm_range = ( history[i] - color_min[i] ) / range;
        float proximity = min ( norm_range, 1.0 - norm_range ); // 0 = near edge, 0.5 = center
        float threshold = 0.2;
        float fade = clamp ( proximity / threshold, 0.0, 1.0 ); // 0 near edge, 1 in center
        weight *= fade;
    }

    blend_factor = mix ( 0.0, blend_factor, weight );
#else
    vec3 blend_factor = vec3 ( 0.1f );

    vec3 weight = vec3 ( 1.0 );

    vec3 range = color_max - color_min + vec3 ( 0.0001f );
    vec3 norm_range = ( history - color_min ) / range;
    vec3 proximity = min ( norm_range, vec3 ( 1.0 ) - norm_range ); // 0 = near edge, 0.5 = center
    vec3 threshold = vec3 ( 0.2 );
    vec3 fade = clamp ( proximity / threshold, vec3 ( 0.0 ), vec3 ( 1.0 ) ); // 0 near edge, 1 in center
    weight *= fade;

    blend_factor = mix ( vec3 ( 0.0 ), blend_factor, weight );
#endif
#else
    vec3 blend_factor = vec3 ( 0.1f );

    vec3 weight = smoothstep ( 0.0, 0.05, min ( abs ( color_min - history), abs ( color_max - history ) ) );

    blend_factor = mix ( vec3 ( 0.0 ), blend_factor, weight );
#endif
    history = clamped_history;

#if 0
    // reduces flickering on edges
    // TODO fix this, as it is it kills all AA
    // https://community.arm.com/arm-community-blogs/b/graphics-gaming-and-vr-blog/posts/temporal-anti-aliasing
    float lum0 = rgb_to_luma ( color );
    float lum1 = rgb_to_luma ( history );
    float luma_diff = abs ( lum0 - lum1 ) / ( 0.000001 + max ( lum0, max ( lum1, rgb_to_luma ( color_max ) ) ) );
    luma_diff = 1 - luma_diff;
    luma_diff *= luma_diff;
    blend_factor *= luma_diff;
#endif

    // Reject history if not valid
    if ( any ( lessThan ( reprojected_uv, vec2 ( 0 ) ) ) || any ( greaterThan ( reprojected_uv, vec2 ( 1 ) ) ) ) {
        blend_factor = vec3 ( 1.0 );
    }

    // Blend
    vec3 blend = mix ( history, color, blend_factor );
    imageStore ( img_color, ivec2 ( gl_GlobalInvocationID.xy ), vec4 ( blend, 1 ) );
    //imageStore ( img_color, ivec2 ( gl_GlobalInvocationID.xy ), vec4 ( velocity, 0, 1 ) );
}
