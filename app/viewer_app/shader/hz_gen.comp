#version 450

#include "xs.glsl"

// https://miketuritzin.com/post/hierarchical-depth-buffers

layout ( binding = 0, set = xs_resource_binding_set_per_draw_m ) uniform texture2D tex_depth;
layout ( binding = 1, set = xs_resource_binding_set_per_draw_m, r16f ) uniform writeonly image2D img_depth;

layout ( binding = 2, set = xs_resource_binding_set_per_draw_m ) uniform shader_cbuffer_t {
    vec2 resolution_f32;
} shader_cbuffer;

layout ( binding = 3, set = xs_resource_binding_set_per_draw_m ) uniform sampler sampler_point;

layout ( local_size_x = 16 / 4, local_size_y = 16 / 4, local_size_z = 1 ) in;

shared uint workgroup_min_depth_uint;

void main() {
    if ( gl_LocalInvocationIndex == 0 ) {
        workgroup_min_depth_uint = floatBitsToUint ( 1.f );
    }

    memoryBarrierShared();
    barrier();

    vec2 texel_to_uv = 1.f / shader_cbuffer.resolution_f32;
    uvec2 base_texel = 4 * gl_GlobalInvocationID.xy;
    vec2 gather_uv_0 = ( base_texel + uvec2 ( 1, 1 ) ) * texel_to_uv;
    vec2 gather_uv_1 = ( base_texel + uvec2 ( 3, 1 ) ) * texel_to_uv;
    vec2 gather_uv_2 = ( base_texel + uvec2 ( 1, 3 ) ) * texel_to_uv;
    vec2 gather_uv_3 = ( base_texel + uvec2 ( 3, 3 ) ) * texel_to_uv;

    vec4 gather0 = textureGather ( sampler2D ( tex_depth, sampler_point ), gather_uv_0 );
    vec4 gather1 = textureGather ( sampler2D ( tex_depth, sampler_point ), gather_uv_1 );
    vec4 gather2 = textureGather ( sampler2D ( tex_depth, sampler_point ), gather_uv_2 );
    vec4 gather3 = textureGather ( sampler2D ( tex_depth, sampler_point ), gather_uv_3 );

    vec4 gather_mins = min ( min ( gather0, gather1 ), min ( gather2, gather3 ) );
    float final_min = min ( min ( gather_mins.x, gather_mins.y ), min ( gather_mins.z, gather_mins.w ) );
    atomicMin ( workgroup_min_depth_uint, floatBitsToUint ( final_min ) );

    memoryBarrierShared();
    barrier();

    if ( gl_LocalInvocationIndex == 0 ) {
        float workgroup_min = uintBitsToFloat ( workgroup_min_depth_uint );

        imageStore ( img_depth, ivec2 ( gl_WorkGroupID.xy ), vec4 ( workgroup_min ) );
    }
}
