#version 450

#include "xs.glsl"

#include "common.glsl"

layout ( set = xs_shader_binding_set_dispatch_m, binding = 0 ) uniform texture2D tex_color;
layout ( set = xs_shader_binding_set_dispatch_m, binding = 1 ) uniform texture2D tex_history;
layout ( set = xs_shader_binding_set_dispatch_m, binding = 2 ) uniform texture2D tex_depth;
layout ( set = xs_shader_binding_set_dispatch_m, binding = 3 ) uniform texture2D tex_prev_depth;
layout ( set = xs_shader_binding_set_dispatch_m, binding = 4 ) uniform texture2D tex_normal_roughness;
layout ( set = xs_shader_binding_set_dispatch_m, binding = 5 ) uniform utexture2D tex_id;
layout ( set = xs_shader_binding_set_dispatch_m, binding = 6 ) uniform utexture2D tex_prev_id;
layout ( set = xs_shader_binding_set_dispatch_m, binding = 7 ) uniform texture2D tex_velocity;

layout ( set = xs_shader_binding_set_dispatch_m, binding = 8, r11f_g11f_b10f ) uniform writeonly image2D img_color;

layout ( set = xs_shader_binding_set_dispatch_m, binding = 9 ) uniform sampler sampler_point;
layout ( set = xs_shader_binding_set_dispatch_m, binding = 10 ) uniform sampler sampler_linear;

layout ( local_size_x = 8, local_size_y = 8, local_size_z = 1 ) in;

vec4 clip_aabb ( vec4 color, float p, vec3 minimum, vec3 maximum ) {
    // note: only clips towards aabb center (but fast!)
    vec3 center  = 0.5 * ( maximum + minimum );
    vec3 extents = 0.5 * ( maximum - minimum );

    // This is actually `distance`, however the keyword is reserved
    vec4 offset = color - vec4 ( center, p );
    vec3 repeat = abs ( offset.xyz / extents );

    repeat.x = max ( repeat.x, max ( repeat.y, repeat.z ) );

    if ( repeat.x > 1.0 ) {
        // `color` is not intersecting (nor inside) the AABB; it's clipped to the closest extent
        return vec4 ( center, p ) + offset / repeat.x;
    } else {
        // `color` is intersecting (or inside) the AABB.
        return color;
    }
}

void main ( void ) {
    // Compute screen uv
    vec2 screen_uv = vec2 ( ( gl_GlobalInvocationID.xy + vec2( 0.5 ) ) / frame_uniforms.resolution_f32 );
    vec2 texel_size = 1.0 / frame_uniforms.resolution_f32;

    // Sample
    vec3 color = texture ( sampler2D ( tex_color, sampler_point ), screen_uv ).xyz;
    vec2 velocity = texture ( sampler2D ( tex_velocity, sampler_linear ), screen_uv ).xy;

    // TODO use velocity of the ray intersection pixel, not ray source
    vec2 reprojected_uv = screen_uv - velocity;
    vec2 screen_offset = velocity;

    vec3 history = texture ( sampler2D ( tex_history, sampler_linear ), reprojected_uv ).xyz;
    if ( frame_uniforms.is_reload > 0 ) {
        history = color;
    }

    vec3 sum = 0.0.xxx;
    vec3 sum_sq = 0.0.xxx;
    float sum_w = 0.0;

    const int k = 2;
    for ( int y = -k; y <= k; ++y ) {
        for ( int x = -k; x <= k; ++x ) {
            vec2 sample_uv = vec2 ( ( gl_GlobalInvocationID.xy + vec2 ( 0.5 ) + ivec2 ( x, y ) * 1 ) / frame_uniforms.resolution_f32 );
            vec3 n = texture ( sampler2D ( tex_color, sampler_linear ), sample_uv ).xyz;
            float w = exp ( -3.0 * float ( x * x + y * y ) / float ( ( k+1. ) * ( k+1. ) ) );
            sum += n * w;
            sum_sq += n * n * w;
            sum_w += w;
        }
    }

    vec3 avg = sum / sum_w;
    vec3 avg_sq = sum_sq / sum_w;
    vec3 dev = sqrt ( max ( 0.0.xxx, avg_sq - avg * avg ) );

    const float n_dev = 2;
    vec3 min = avg - dev * n_dev;
    vec3 max = avg + dev * n_dev;
    history = clamp ( history, min, max );

    vec3 blend_factor = 0.05.xxx;

    // Reject history if not valid
    if ( any ( lessThan ( reprojected_uv, vec2 ( 0 ) ) ) || any ( greaterThan ( reprojected_uv, vec2 ( 1 ) ) ) ) {
        blend_factor = 1.0.xxx;
    }

    color = mix ( history, color, blend_factor );

    imageStore ( img_color, ivec2 ( gl_GlobalInvocationID.xy ), vec4 ( color, 1 ) );
}
