#version 450

#include "xs.glsl"

#include "common.glsl"

layout ( set = xs_shader_binding_set_dispatch_m, binding = 0 ) uniform texture2D tex_color;
layout ( set = xs_shader_binding_set_dispatch_m, binding = 1 ) uniform texture2D tex_history;
layout ( set = xs_shader_binding_set_dispatch_m, binding = 2 ) uniform texture2D tex_depth;
layout ( set = xs_shader_binding_set_dispatch_m, binding = 3 ) uniform texture2D tex_prev_depth;
layout ( set = xs_shader_binding_set_dispatch_m, binding = 4 ) uniform utexture2D tex_id;
layout ( set = xs_shader_binding_set_dispatch_m, binding = 5 ) uniform utexture2D tex_prev_id;
layout ( set = xs_shader_binding_set_dispatch_m, binding = 6 ) uniform texture2D tex_velocity;

layout ( set = xs_shader_binding_set_dispatch_m, binding = 7, r11f_g11f_b10f ) uniform writeonly image2D img_color;

layout ( set = xs_shader_binding_set_dispatch_m, binding = 8 ) uniform sampler sampler_point;
layout ( set = xs_shader_binding_set_dispatch_m, binding = 9 ) uniform sampler sampler_linear;

layout ( local_size_x = 8, local_size_y = 8, local_size_z = 1 ) in;

void main ( void ) {
    vec2 res = vec2 ( imageSize ( img_color ) );

    // Compute screen uv
    vec2 screen_uv = vec2 ( ( gl_GlobalInvocationID.xy + vec2 ( 0.5 ) ) / res );
    vec2 texel_size = 1.0 / res;

    // Sample
    vec3 color = texture ( sampler2D ( tex_color, sampler_point ), screen_uv ).xyz;
    vec2 velocity_sample = texture ( sampler2D ( tex_velocity, sampler_point ), screen_uv ).xy;
    uvec4 id_sample = texture ( usampler2D ( tex_id, sampler_point ), screen_uv );

    vec2 velocity = velocity_sample - 0.5;
    uint id = id_sample.x << 8 | id_sample.y;

    // reprojection
#if 0
    vec3 view = view_from_depth ( screen_uv, depth );
    vec3 world = ( frame_uniforms.world_from_view * vec4 ( view, 1 ) ).xyz;
    vec3 prev_screen = prev_screen_from_world ( world );
    vec2 screen_offset = prev_screen.xy - screen_uv;
    vec2 reprojected_uv = screen_uv - velocity;
#else
    vec2 reprojected_uv = screen_uv - velocity;
    vec2 screen_offset = velocity;
#endif

    // history sample
    //vec3 history = texture ( sampler2D ( tex_history, sampler_point ), prev_screen.xy ).xyz;
    vec3 history = texture ( sampler2D ( tex_history, sampler_linear ), reprojected_uv ).xyz;
    uvec4 prev_id_sample = texture ( usampler2D ( tex_prev_id, sampler_point ), reprojected_uv );

    uint prev_id = prev_id_sample.x << 8 | prev_id_sample.y;

    // history clamping
#if 1
    vec3 sum = 0.0.xxx;
    vec3 sum_sq = 0.0.xxx;
    float sum_w = 0.0;

    const int k = 2;
    for ( int y = -k; y <= k; ++y ) {
        for ( int x = -k; x <= k; ++x ) {
            vec2 sample_uv = vec2 ( ( gl_GlobalInvocationID.xy + vec2 ( 0.5 ) + ivec2 ( x, y ) * 1 ) / res );
            vec3 n = texture ( sampler2D ( tex_color, sampler_linear ), sample_uv ).xyz;
            float w = exp ( -3.0 * float ( x * x + y * y ) / float ( ( k+1. ) * ( k+1. ) ) );
            sum += n * w;
            sum_sq += n * n * w;
            sum_w += w;
        }
    }

    vec3 avg = sum / sum_w;
    vec3 avg_sq = sum_sq / sum_w;
    vec3 dev = sqrt ( max ( 0.0.xxx, avg_sq - avg * avg ) );

    const float n_dev = 2;
    vec3 his_min = avg - dev * n_dev;
    vec3 his_max = avg + dev * n_dev;
    history = clamp ( history, his_min, his_max );

#else
    // Sample neighborhood
    vec3 n0 = texture ( sampler2D ( tex_color, sampler_point ), screen_uv + vec2 (  1,  0 ) * texel_size ).xyz;
    vec3 n1 = texture ( sampler2D ( tex_color, sampler_point ), screen_uv + vec2 (  0,  1 ) * texel_size ).xyz;
    vec3 n2 = texture ( sampler2D ( tex_color, sampler_point ), screen_uv + vec2 ( -1,  0 ) * texel_size ).xyz;
    vec3 n3 = texture ( sampler2D ( tex_color, sampler_point ), screen_uv + vec2 (  0, -1 ) * texel_size ).xyz;

    vec3 color_min = min ( color, min ( n0, min ( n1, min ( n2, n3 ) ) ) );
    vec3 color_max = max ( color, max ( n0, max ( n1, max ( n2, n3 ) ) ) );
    history = clamp ( history, color_min, color_max );
#endif

    // blend factor
    float blend_factor = 0.05;

    // history rejection
    if ( any ( lessThan ( reprojected_uv, vec2 ( 0 ) ) ) || any ( greaterThan ( reprojected_uv, vec2 ( 1 ) ) ) || frame_uniforms.is_reload > 0 ) {
        blend_factor = 1.0;
    }

    if ( prev_id != id ) {
        blend_factor = 1;
    }

    // store
    color = mix ( history, color, blend_factor );
    imageStore ( img_color, ivec2 ( gl_GlobalInvocationID.xy ), vec4 ( color, 1 ) );
}
